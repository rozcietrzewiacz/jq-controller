---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: jq-ctr
  name: jq-ctr
spec:
  finalizers:
    - kubernetes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jq-controller-operator
  namespace: jq-ctr
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      jq-ctr: operator
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        jq-ctr: operator
    spec:
      containers:
        - command:
            - bash
            - /c/controller.sh
          env:
            - name: KUBECTL_MAIN_ACTION
              value: apply
            - name: HEADER_DEF_FILE
              value: /in/header.jq
            - name: TRANSFORM_DEF_FILE
              value: /in/filter.jq
            - name: FOOTER_DEF_FILE
              value: /in/footer.jq
            - name: WATCH_TARGET
              value: jqcontrollers.jq-ctr.io
            - name: WATCH_MASK
              value: .
            - name: LIB_PATH
              value: /jqLib
            - name: EXTRA_ARGS_PATH
              value: /extra
          image: portainer/kubectl-shell
          imagePullPolicy: IfNotPresent
          name: ctr
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /c
              name: scripts
            - mountPath: /in
              name: filter
            - mountPath: /extra
              name: extra
            - mountPath: /jqLib
              name: jqlib
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: jq-adm
      serviceAccountName: jq-adm
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: jq-controller.sh
          name: scripts
        - configMap:
            defaultMode: 420
            name: jq-controller-operator.jq
          name: filter
        - configMap:
            defaultMode: 420
            name: lib.jq
          name: jqlib
        - name: extra
          projected:
            defaultMode: 420
            sources:
              - downwardAPI:
                  items:
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.labels['jq-ctr']
                      path: labelJqCtr
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                      path: namespace
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.name
                      path: parentControllerName
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.uid
                      path: parentControllerUid
              - configMap:
                  name: templates
---
apiVersion: v1
data:
  controller.sh: |+
    #!/bin/bash
    : ${KUBECTL_MAIN_ACTION:=apply} # apply (loop) or create (single)
    : ${WATCH_TARGET:="configmap"} # Object being watched
    : ${WATCH_MASK:="."} # Only react to changes in that object path
    : ${EXTRA_ARGS_PATH:=""}
    : ${LIB_PATH:=""}
    : ${HEADER_DEF_FILE:="/in/header.jq"}
    : ${TRANSFORM_DEF_FILE:="/in/filter.jq"}
    : ${FOOTER_DEF_FILE:="/in/footer.jq"}
    : ${WATCH_EVENTS:='ADDED, MODIFIED'}
    : ${WATCH_FUNCTION:=kubectlGetWatch}
    : ${APPLY_FUNCTION:=filterApplyLoop}

    msg() { echo "$@"; }
    dbg() { [ "$DEBUG" ] && msg ">DEBUG> $@"; }
    main() {
      ${WATCH_FUNCTION} \
      | ${APPLY_FUNCTION}
    }

    kubectlGetWatch() {
      local allNs=""
      [[ $ALL_NS ]] && allNs="-A"
      kubectl get --watch -o json --output-watch-events \
        $allNs ${WATCH_TARGET} \
        | jq --unbuffered -c --arg watch_events "$WATCH_EVENTS" \
          '
            .type as $type
            | select(
                ( $watch_events | split(", ") | index($type) ) != null
              )
            | .object
          '
    }

    filterApplyLoop() {
      local fullFilter=$(mktemp)
      declare -A LastRev
      _combineJsons() {
        cat \
          ${HEADER_DEF_FILE} \
          ${TRANSFORM_DEF_FILE} \
          ${FOOTER_DEF_FILE} \
          > "$fullFilter"
      }
      _cleanup() {
        rm -v "$fullFilter"
      }
      _uid() { jq -r '.metadata.uid'; }
      _rev() { jq -r '.metadata.resourceVersion'; }
      _masked() { <<<"$@" jq -c "$WATCH_MASK"; }

      local inputUpdate lastValue output result=0 selfMod= inUid
      dbg "in filterApplyLoop"
      _combineJsons
      while read -r inputUpdate
      do
        dbg "read new json: \"$inputUpdate\""
        # TODO: filter out based on fieldManager metadata
        #
        [ $(_masked "${inputUpdate}") == $(_masked "${lastValue}") ] \
        || {
          lastValue="${inputUpdate}"
          echo
          inUid=$(_uid <<<"${inputUpdate}")
          msg "> Update detected for uid $inUid"
          if [ $selfMod ] \
            && [[ ${LastRev[$inUid]} == $(_rev <<<"${inputUpdate}") ]]
          then
            msg ">> skip! Same revision as our update <<"
            sleep 1
            continue
          fi
          output=$(
            <<<"${inputUpdate}" jq -c \
              -f "${fullFilter}" \
              $JQ_EXTRA_ARGS \
            | tee >( jq '{kind, ns:.metadata.namespace, name: .metadata.name}' -cC  > /dev/stderr )
          )
          updateTimestamp=$(date +%s)
          # TODO: some sanity check/filter possible before apply
          output=$( <<<"${output}" jq \
            | kubectl ${KUBECTL_MAIN_ACTION} --field-manager='jq-controller' -o json -f - )
          result=$?
          # check if the output is the same object
          if [[ "$inUid" == $(_uid <<<"${output}") ]]
          then
            msg " >> Modifying source object!"
            selfMod=yes
            LastRev[$inUid]=$( _rev <<<"${output}" )
            msg "  > recorded: LastRev[$inUid]=${LastRev[$inUid]}"
          fi
          # If we're running in "create" mode, break after first successful run
          [[ ${KUBECTL_MAIN_ACTION} == "create" && $result -eq 0 ]] && break
        }
      done
      msg ">> APPLY LOOP EXITED"
      if [ $result -gt 0 ]
      then
        msg "Dumping dry-run output:"
        <<<${inputUpdate} jq ${JQ_EXTRA_DUMP_ARGS} \
          -f "${fullFilter}" \
          $JQ_EXTRA_ARGS
      fi
      _cleanup
    }

    hello() {
      ############################################################
      # TODO:
      # - Add operating modes: poll/watch
      # - Abstract source command, so that 'kubectl get' can be replaced with any custom script. Ideas:
      #   . aws-cli --output json
      #   . curl <rss-feed> | yq <extraction_filter>
      #   . curl <any api endpoint>
      msg ">> JQ Controller startig..."                       #
      msg " > kubectl operting mode:    $KUBECTL_MAIN_ACTION" # H
      msg " > watching resource:         $WATCH_TARGET"       # e
      msg " > watch json mask:           $WATCH_MASK"         # l
      msg " > header definition file:    $HEADER_DEF_FILE"    # l
      msg " > transform definition file: $TRANSFORM_DEF_FILE" # o
      msg " > footer definition file:    $FOOTER_DEF_FILE"    # ?
      for f in ${HEADER_DEF_FILE} ${TRANSFORM_DEF_FILE} ${FOOTER_DEF_FILE}; do
        [ -r ${f} ] || {                                      # .
          msg "ERROR: $f is not readable!" | tee /dev/stderr  # .
          ls -l "${f}" 2>&1                                   #
          exit 1                                              # i
        }                                                     # s
      done                                                    #
      WATCH_LIST="${HEADER_DEF_FILE}:x"                       # i
      WATCH_LIST+=" ${TRANSFORM_DEF_FILE}:x"                  # t
      WATCH_LIST+=" ${FOOTER_DEF_FILE}:x"                     #
      WATCH_LIST+=" ${BASH_ARGV0}:ex"                         # m
      [ "${EXTRA_ARGS_PATH}" != "" ] && {                     # e
        msg " > obtaining args from ${EXTRA_ARGS_PATH} ..."   #
        cd ${EXTRA_ARGS_PATH}                                 # y
        for name in *                                         # o
        do                                                    # u
          if [[ $name == *".json" ]]                          # '
          then                                                # r
            value=$( < $name jq '@json' )                     # e
            JQ_EXTRA_ARGS+=" --argjson ${name%%\.json} $value" #
          else                                                # l
            value=$(< $name )                                 # o
            JQ_EXTRA_ARGS+=" --arg $name $value"              # o
          fi                                                  # k
          WATCH_LIST+=" ${EXTRA_ARGS_PATH}/${name}:x"         # i
        done                                                  # n
        cd - &>/dev/null                                      # g
        echo "JQ_EXTRA_ARGS: $JQ_EXTRA_ARGS"                  #
      }                                                       # f
      [ "${LIB_PATH}" != "" ] && {                            # o
        msg " > appending lib path to args..."                # r
        JQ_EXTRA_ARGS+=" -L $LIB_PATH"                        # ?
      }                                                       #
    }

    handleExit() {
      echo ">> INTERRUPT caught. Killing own pod <<"
      killall5 || kill $(pidof kubectl)
    }

    world() {
      if [[ ${KUBECTL_MAIN_ACTION} == "create" ]]
      then
        main
      else
        while true
        do
          main
          sleep 2
        done
      fi
    }

    ####################
    export -f handleExit
    trap handleExit INT
    echo "MY PID: $$"
    trap -p

    hello
    world

  dbg.sh: |+
    #!/bin/bash
    echo Dummy

kind: ConfigMap
metadata:
  name: jq-controller.sh
  namespace: jq-ctr
---
apiVersion: v1
data:
  filter.jq: |-
    ## input ##
    . as $cr
    #OLD: | $cr.metadata.name as $customResourceName
    #OLD: | $cr.metadata.uid  as $customResourceUid
    | $cr.metadata.namespace as $crNamespace
    | $cr.spec.transform.input as $src
    | $src.watchTarget as $target #XXX bad name!
    | $cr.spec.transform.filter as $filter
    | $cr.spec.watcherConfig.image as $image
    | ($cr.spec.watcherConfig.addEnv // []) as $addEnv
    |
    ### output generators ###
    (
      # 0. RBAC
      rbac( $customResourceName; $crNamespace;
        $cr.spec.transform.input.watchTarget;
        $cr.spec.transform.output.affectedObjectTypes
      )
    )
    ,
    (
      # 1. A controller as a deployment
      deploy(
        pod( $customResourceName )
        |.metadata.labels["jq-ctr"] = $labelJqCtr
        |.metadata.labels |= {
          "jq-ctr.io/level": "controller",
          "jq-ctr.io/cr-uid": $customResourceUid,
          "jq-ctr.io/cr-name": $customResourceName
        }
        |.spec.containers = [{
            "name": "ctr",
            "image": $image,
            "command": [
              "bash",
              "/c/controller.sh"
            ],
            "volumeMounts": [
              { "name": "scripts", "mountPath": "/c" },
              { "name": "extra",   "mountPath": "/extra" },
              { "name": "filter",  "mountPath": "/in" },
              { "name": "jqlib",  "mountPath": "/jqLib" }
            ],
            "env": (
            [
              { "name": "KUBECTL_MAIN_ACTION",
                "value": ($cr.spec.mode == "single" and "create" // "apply" )
              },
              { "name": "HEADER_DEF_FILE", "value": "/in/header.jq" },
              { "name": "TRANSFORM_DEF_FILE", "value": "/in/filter.jq" },
              { "name": "FOOTER_DEF_FILE", "value": "/in/footer.jq" },
              { "name": "WATCH_TARGET",  "value": ($target.kind + "." + $target.apiGroup) },
              { "name": "WATCH_EVENTS",  "value": $src.watchEvents },
              { "name": "WATCH_MASK",    "value": $src.watchMask },
              { "name": "LIB_PATH",           "value": "/jqLib" },
              { "name": "EXTRA_ARGS_PATH",    "value": "/extra" }
            ]
            + (
                if ($target.namespace == null)
                then
                [{ "name": "ALL_NS",    "value": "yes" }]
                else
                []
                end
              )
            + $addEnv
            )
          }]
        |.spec.volumes[0] = { "name": "scripts", "configMap": { "defaultMode": 420, "name": "jq-controller.sh" }}
        |.spec.volumes += [{ "name": "jqlib", "configMap": { "defaultMode": 420, "name": "lib.jq" }}]
        |.spec.volumes += [{ "name": "filter",  "configMap": { "defaultMode": 420, "name": $customResourceName }}]
        |.spec.volumes += varsFrom(
          [{ jqCtrLabel: "cr-uid", var: "customResourceUid" },
           { jqCtrLabel: "cr-name", var: "customResourceName" }]
          +
          $cr.spec.transform.variablesFrom )
        |.spec.serviceAccount = $customResourceName
      ) #END Pod
    ) #END deployment
    ,
    # 2. filter definition
    (
      cm( $customResourceName )
      | .data["header.jq"] = (
        $cr.spec.transform.header
        #
        #
        ##### XXX HERE the header and footer need to be
        # different than in the operator!
        #
        #
        // "
        include \"lib\";
        . as $source
        | $source.metadata.name as $sourceName
        | $source.metadata.uid  as $sourceUid
        |"
      )
      | .data["filter.jq"] = $filter
      | .data["footer.jq"] = (
        # TODO: use merge instead (?)
        $cr.spec.transform.footer
        // "
        #TODO: do the chown conditionally, depending on
        # whether the output is the same as input:
        #| chown($source)
        | .metadata |= (
          .
          | .labels = {
            # the CR-dedicated controller hardcodes these two:
            \"jq-ctr.io/cr-name\": \"" + $customResourceName + "\",
            \"jq-ctr.io/cr-uid\": \"" + $customResourceUid + "\",
            \"jq-ctr.io/source-kind\": $source.kind,
            \"jq-ctr.io/source-name\": $sourceName,
            \"jq-ctr.io/source-uid\": $sourceUid
          }
        )"
      )
    )
  footer.jq: |-
    # 3. set the input CR to be the owner of all the above
    | chown( $source )
    | .metadata |= (
      .labels = {
        "jq-ctr.io/cr-name": $customResourceName,
        "jq-ctr.io/cr-uid": $customResourceUid
      }
    )
  header.jq: |-
    include "lib";

    . as $source
    # NOTE: The source in this case is the jc resource
    | $source.metadata.name as $customResourceName
    | $source.metadata.uid  as $customResourceUid
    |
kind: ConfigMap
metadata:
  name: jq-controller-operator.jq
  namespace: jq-ctr
---
apiVersion: v1
data:
  lib.jq: |-
    def tpl(s): s | fromjson;
    def chown( api; kind; name; uid ):
      .metadata.ownerReferences = [
        {
          "apiVersion": api,
          "kind": kind,
          "name": name,
          "uid": uid,
          "blockOwnerDeletion": true,
        }
      ]
    ;
    def chown( owner ):
      .metadata.ownerReferences = [
        owner
        |{
          apiVersion,
          kind,
          "name": .metadata.name,
          "uid": .metadata.uid,
          blockOwnerDeletion: true,
        }
      ]
    ;

    def cm ( name ):
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "jq": "controller",
            "operator": name
          },
          "name": name
        },
        "data": {}
      }
    ;

    def pod ( name ):
      {
        "apiVersion": "v1",
        "kind": "Pod",
        "metadata": {
          "labels": {
            "jq": "controller",
            "operator": name
          },
          "name": name
        },
        "spec": {
          "restartPolicy": "Always"
        }
      }
    ;
    def pod ( name; image ):
      pod( name )
      | .spec.containers[0] |= (
        .image = image
        | .name = name
      )
    ;

    def deploy ( pod ):
      {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "metadata": pod.metadata,
        "spec": {
          "replicas": 1,
          "selector": {
            "matchLabels": pod.metadata.labels
          },
          "template": (pod | {metadata,spec})
        }
      }
    ;
    def deploy: deploy( . );

    def rs ( pod ):
      deploy( pod )
      | .kind = "ReplicaSet"
    ;
    def rs: rs( . );

    def expose ( port ):
      .metadata as $meta
      |
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": ( $meta | {name,namespace,labels} )
      }
      | .spec.ports += [{
        "protocol": "TCP",
        "port": port,
        "targetPort": port
      }]
      | .spec.selector = $meta.labels
    ;

    def fieldVar( field; var ):
      {
        "fieldRef": {
          "fieldPath": field
        },
        "path": var
      }
    ;

    def labelVar( lbl; var ):
      fieldVar( "metadata.labels['jq-ctr.io/" + lbl + "']"; var)
    ;

    def varsFrom( varSpecArray ):
      [   # FIXME: detect if it doesn't exist
          # e.g. select(.name == "extra" ) // { <TEMPLATE> }
        { "name": "extra", "projected": {
          "defaultMode": 420,
          "sources": [{
            "downwardAPI": {
              "items": [
                ( [ varSpecArray[]
                    | select(.jqCtrLabel != null)
                  ]
                  | unique_by( .jqCtrLabel )
                  |.[]
                  | labelVar( .jqCtrLabel; .var )
                ),
                ( [ varSpecArray[]
                    | select(.field != null)
                  ]
                  | unique_by( .field )
                  |.[]
                  | fieldVar( .field; .var )
                )
              ]
            }
          }]
        }}
        # append configmaps
        | .projected.sources += [
          varSpecArray[]
          | select(.configMap != null)
          | { "configMap": { "name": .configMap }}
        ]
      ]
    ;

    #def rbacGlobal(name; ns; readObject; writeObjects):
    def rbac(name; ns; readObject; writeObjects):
      .
      | ( readObject
          | {
              apiGroups: [.apiGroup],
              resources: [.kind],
              verbs: ["get", "list", "watch"]
            }
        ) as $ro
      | ( writeObjects[]
          | {
              apiGroups: [.apiGroup],
              resources: [.kind],
              verbs: ["get", "list",
                "create", "update", "patch", "delete"]
            }
        ) as $rw
      | ( "jq-ctr:" + name ) as $roleName
      |{
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "name": name,
          "namespace": ns
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRole",
        "metadata": {
          "name": $roleName
        },
        "rules": [
          $ro,
          $rw
        ]
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "ClusterRoleBinding",
        "metadata": {
          "name": $roleName
          #"namespace": ns
        },
        "roleRef": {
          "apiGroup": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "name": $roleName
        },
        "subjects": [
          {
            "kind": "ServiceAccount",
            "name": name,
            "namespace": ns
          }
        ]
      }
    ;
      def hasTaints:
        .spec.taints != null
      ;

      def hasTaint(t):
        .spec
        | (.taints // [])
        | [
          .[]
          | select(
            .key == ("node.kubernetes.io/" + t)
          )
        ]
        | any
      ;

      def hasTaint(taint; effect):
        .spec
        | (.taints // [])
        | [
          .[]
          | select(
            .key == ("node.kubernetes.io/" + taint)
          )
          | select(
            .effect == effect
          )
        ]
        | any
      ;
kind: ConfigMap
metadata:
  name: lib.jq
  namespace: jq-ctr
---
apiVersion: v1
data:
  pod.json: |+
    {
        "apiVersion": "v1",
        "kind": "Pod",
        "metadata": {
            "namespace": "default"
        },
        "spec": {
            "containers": [
                {
                    "imagePullPolicy": "IfNotPresent"
                }
            ],
            "dnsPolicy": "ClusterFirst",
            "preemptionPolicy": "PreemptLowerPriority",
            "restartPolicy": "Always"
        }
    }

kind: ConfigMap
metadata:
  name: templates
  namespace: jq-ctr
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jq-adm
  namespace: jq-ctr
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-jq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: jq-adm
    namespace: jq-ctr
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: jqcontrollers.jq-ctr.io
spec:
  conversion:
    strategy: None
  group: jq-ctr.io
  names:
    kind: JqController
    listKind: JqControllerList
    plural: jqcontrollers
    shortNames:
      - jctr
      - jc
    singular: jqcontroller
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              type: string
            kind:
              type: string
            spec:
              properties:
                transform:
                  properties:
                    filter:
                      type: string
                    input:
                      properties:
                        watchEvents:
                          type: string
                        watchMask:
                          type: string
                        watchTarget:
                          properties:
                            apiGroup:
                              type: string
                            kind:
                              type: string
                            namespace:
                              type: string
                          type: object
                      type: object
                    output:
                      properties:
                        affectedObjectTypes:
                          items:
                            properties:
                              apiGroup:
                                type: string
                              kind:
                                type: string
                            type: object
                          type: array
                      type: object
                    variablesFrom:
                      items:
                        properties:
                          configMap:
                            type: string
                          field:
                            type: string
                          jqCtrLabel:
                            type: string
                          var:
                            type: string
                        type: object
                      type: array
                  type: object
                watcherConfig:
                  properties:
                    addEnv:
                      items:
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    image:
                      type: string
                  type: object
              type: object
          type: object
      served: true
      storage: true
